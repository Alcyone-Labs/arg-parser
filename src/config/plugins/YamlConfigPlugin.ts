import { ConfigPlugin } from "./ConfigPlugin";

/**
 * YAML configuration plugin (requires js-yaml dependency)
 * This plugin is optional and only loaded when YAML support is needed
 */
export class YamlConfigPlugin extends ConfigPlugin {
  readonly supportedExtensions = [".yaml", ".yml"];
  readonly name = "yaml";

  private yamlModule: any = null;

  constructor(yamlModule?: any) {
    super();
    if (yamlModule) {
      this.yamlModule = yamlModule;
    } else {
      this.loadYamlModule();
    }
  }

  private loadYamlModule(): void {
    try {
      // Dynamic import to avoid bundling issues
      if (typeof require !== "undefined") {
        this.yamlModule = require("js-yaml");
      } else {
        throw new Error("YAML module not available in this environment");
      }
    } catch (error) {
      throw new Error(
        "YAML plugin requires js-yaml dependency. " +
          "Install it with: npm install js-yaml",
      );
    }
  }

  parse(content: string): Record<string, any> {
    if (!this.yamlModule) {
      // Fallback to simple parsing if module not available
      return this.parseYamlSimple(content);
    }

    try {
      const parsed = this.yamlModule.load(content);
      if (typeof parsed !== "object" || parsed === null) {
        throw new Error("YAML file must contain an object at the root level");
      }
      return parsed;
    } catch (error) {
      throw new Error(
        `Failed to parse YAML: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  generate(
    _config: Record<string, any>,
    flags: any[],
    parsedArgs: any,
  ): string {
    const lines: string[] = [];
    lines.push("# Environment configuration generated by ArgParser");
    lines.push("# Format: YAML");
    lines.push("");

    const configWithValues: Record<string, any> = {};

    for (const flag of flags) {
      if (flag.name === "help") continue;

      const flagValue = parsedArgs[flag.name];
      const isSet = flagValue !== undefined && flagValue !== null;
      const isMandatory = flag.mandatory === true;

      if (isSet) {
        configWithValues[flag.name] = flagValue;
      } else if (isMandatory) {
        configWithValues[flag.name] =
          flag.defaultValue !== undefined ? flag.defaultValue : null;
      }
    }

    if (!this.yamlModule) {
      // Simple YAML generation if module not available
      for (const [key, value] of Object.entries(configWithValues)) {
        lines.push(`${key}: ${JSON.stringify(value)}`);
      }
      return lines.join("\n");
    }

    try {
      const yamlContent = this.yamlModule.dump(configWithValues, {
        indent: 2,
        lineWidth: 120,
        noRefs: true,
      });
      return lines.join("\n") + "\n" + yamlContent;
    } catch (error) {
      throw new Error(
        `Failed to generate YAML: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  /**
   * Simple YAML parsing fallback for basic key-value pairs
   */
  private parseYamlSimple(content: string): Record<string, any> {
    const config: Record<string, any> = {};
    const lines = content.split("\n");

    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith("#")) {
        const colonIndex = trimmed.indexOf(":");
        if (colonIndex > 0) {
          const key = trimmed.substring(0, colonIndex).trim();
          let value = trimmed.substring(colonIndex + 1).trim();

          // Remove quotes if present
          if (
            (value.startsWith('"') && value.endsWith('"')) ||
            (value.startsWith("'") && value.endsWith("'"))
          ) {
            value = value.slice(1, -1);
          }

          config[key] = value;
        }
      }
    }

    return config;
  }
}

/**
 * Factory function to create YAML plugin safely
 * Returns null if YAML dependency is not available
 */
export function createYamlPlugin(): YamlConfigPlugin | null {
  try {
    return new YamlConfigPlugin();
  } catch (error) {
    console.warn(
      "YAML plugin not available:",
      error instanceof Error ? error.message : String(error),
    );
    return null;
  }
}

/**
 * Async factory function to create YAML plugin with ESM support
 * Returns null if YAML dependency is not available
 */
export async function createYamlPluginAsync(): Promise<YamlConfigPlugin | null> {
  try {
    // Try CommonJS first
    if (typeof require !== "undefined") {
      try {
        const yamlModule = require("js-yaml");
        return new YamlConfigPlugin(yamlModule);
      } catch (error) {
        // Fall through to ESM import
      }
    }

    // Try ESM dynamic import
    const yamlModule = await import("js-yaml");
    return new YamlConfigPlugin(yamlModule);
  } catch (error) {
    console.warn(
      "YAML plugin not available:",
      error instanceof Error ? error.message : String(error),
    );
    return null;
  }
}
